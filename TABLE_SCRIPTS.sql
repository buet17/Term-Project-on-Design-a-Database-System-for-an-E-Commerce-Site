CREATE DATABASE BUET;
USE BUET;

CREATE TABLE EMPLOYEE
(
	EMP_ID  INTEGER NOT NULL,
	FIRST_NAME VARCHAR(30),
    MIDDLE_NAME VARCHAR(30),
    LAST_NAME VARCHAR(30),
    FATHER_NAME  VARCHAR(30),
    MOTHER_NAME VARCHAR(30),
    EMAIL   VARCHAR(30),
    BIRTH_OF_DATE DATE,
    IMAGE BLOB,
    USER_ID INTEGER NOT NULL,
    CREATED_AT DATETIME,
    UPDATED_AT DATETIME,
    PASSWORD CHAR(10),
    GENDER_ID INTEGER,
    MARITAL_ID INTEGER,
    ROLE_ID INTEGER NOT NULL,
    PRIMARY KEY(EMP_ID)
);

CREATE TABLE GENDER
(
    GENDER_ID  INTEGER NOT NULL,
    GENDER VARCHAR(30) NOT NULL,
    PRIMARY KEY(GENDER_ID)
);

CREATE TABLE MARITAL
(
    MARITAL_ID  INTEGER NOT NULL,
    MARITAL_STATUS VARCHAR(30) NOT NULL,
    PRIMARY KEY(MARITAL_ID)
);

CREATE TABLE STOCK
(
    STOCK_ID INTEGER NOT NULL,
    UNIT_IN_STOCK INTEGER NOT NULL,
    QUANTITY_PER_UNIT INTEGER NOT NULL,
    REORDER_LEVEL CHAR(10),
    ITEM_ID INTEGER NOT NULL,
    USER_ID INTEGER NOT NULL,
    PRIMARY KEY(STOCK_ID)
);

CREATE TABLE ITEM_CATEGORY
(
    CATEGORY_ID INTEGER NOT NULL,
    CATEGORY_NAME VARCHAR(30),
    DESCRIPTION VARCHAR(50),
    PICTURE BLOB,
    ACTIVE CHAR(10),
    PRIMARY KEY(CATEGORY_ID)
);


CREATE TABLE PAYMENT
(
    PAYMENT_NO INTEGER NOT NULL,
    PAYMENT_TYPE VARCHAR(30),
    PAYMENT_DATE DATE,
    AMOUNT numeric(10,2),
    ALLOWED CHAR(10),
    ORDER_ID INTEGER,
    PRIMARY KEY(PAYMENT_NO)
);

CREATE TABLE SHIPMENT
(
    SHIPMENT_ID INTEGER NOT NULL,
    SHIPMENT_ADDRESS VARCHAR(100),
    SHIPMENT_DATE DATE,
    SHIPMET_CONTACT VARCHAR(100),
    NOTE VARCHAR(100),
    ORDER_ID INTEGER NOT NULL,
    PRIMARY KEY(SHIPMENT_ID)
);

CREATE TABLE CREDIT_CARD_INFO
(
    CREDIT_CARD_ID INTEGER NOT NULL,
    CREDIT_CARD_TYPE VARCHAR(100),
    PRIMARY KEY(CREDIT_CARD_ID)
);

CREATE TABLE CUSTOMER
(
    CUSTOMER_ID INTEGER NOT NULL,
    FIRST_NAME VARCHAR(30),
    MIDDLE_NAME VARCHAR(30),
    LAST_NAME VARCHAR(30),
    CLASS char(10),
    BUILDING char(10),
    ADDRESS1 VARCHAR(100),
    ADDRESS2 VARCHAR(100),
    CITY VARCHAR(30),
    STATE VARCHAR(30),
    POSTAL_CODE char(10),
    COUNTRY VARCHAR(30),
    PHONE char(10),
    EMAIL VARCHAR(30),
    CREDIT_CARD VARCHAR(30),
    CARDEXPMOTH char(10),
    CARDEXPYEAR char(10),
    BILLINGADDRESS VARCHAR(100),
    BILLINGCITY VARCHAR(100),
    BILLINGREGION VARCHAR(100),
    BILLINGPOSTALCODE char(10),
    BILLINGCOUNTRY VARCHAR(30),
    ISSUE_DATE date,
    SHIPMENT_ID INTEGER,
    CREDIT_CARD_TYPE_ID INTEGER,
    PAYMENT_NO INTEGER NOT NULL,
    ROLE_ID INTEGER NOT NULL,
    PRIMARY KEY(CUSTOMER_ID)
);

CREATE TABLE ORDERS
(
    ORDER_ID INTEGER NOT NULL,
    ORDER_NO INTEGER NOT NULL,
    ISSUE_DATE date,
    IS_DELIVER char(10),
    DELIVERY_DATE date,
    ORDER_DATE date,
    REQUIRED_DATE date,
    FREIGHT char(10),
    SALES_TAX INTEGER,
    TIMESTAMP datetime,
    ERRLOC char(10),
    ERRMSG VARCHAR(50),
    FULLFILLED char(10),
    DELETED char(10),
    PAID char(10),
    PAYMENT_DATE DATE,
    CUSTOMER_ID INTEGER,
    ITEM_ID integer not null,
    EMP_ID INTEGER NOT NULL,
    USER_ID INTEGER,
    PRIMARY KEY (ORDER_ID),
    CONSTRAINT ORD_CUST_ID_FK FOREIGN KEY(CUSTOMER_ID) references CUSTOMER(CUSTOMER_ID)    
);


CREATE TABLE STORE
(
    STORE_ID INTEGER NOT NULL,
    STORE_NAME VARCHAR(30),
    STORE_LOC VARCHAR(50),
    ITEM_COUNT INTEGER,
    CREATED_AT datetime,
    UPDATED_AT datetime,
    ITEM_ID INTEGER,
    EMP_ID INTEGER NOT NULL,
    ITEM_NO INTEGER NOT NULL,
    PRIMARY KEY (STORE_ID)
);

CREATE TABLE ITEM
(
    ITEM_ID INTEGER NOT NULL,
    ITEM_NO INTEGER NOT NULL,
    ITEM_NAME VARCHAR(50),
    SKU CHAR(10),
    IDSKU CHAR(10),
    QUANTITY INTEGER,
    ITEM_DESC VARCHAR(50),
    QUANTITY_PER_UNIT INTEGER,
    PURCHASE_PRICE NUMERIC(10,2),
    SALES_PRICE NUMERIC(10,2),
    AVAILABLE_SIZE CHAR(10),
    UNIT_PRICE INTEGER,
    AVAILABLE_COLORS CHAR(10),
    SIZE  CHAR(10),
    COLOR CHAR(10),
    DISCOUNT NUMERIC(10,2),
    UNIT_WEIGHT NUMERIC(10,2),
    UNIT_ON_ORDER INTEGER,
    ITEM_AVAILABLE CHAR(10),
    DISC_AVAILABLE CHAR(10),
    CURRENT_ORDER CHAR(10),
    PICTURE blob,
    RANKING CHAR(10),
    NOTE VARCHAR(200),
    CATEGORY_ID INTEGER,
    PRIMARY KEY(ITEM_ID)
);


CREATE TABLE ORDER_DETAILS
(
	ORDER_DETAIL_ID INTEGER NOT NULL,
    PRICE numeric(10,2),
    QUANTITY INTEGER,
    DISCOUNT NUMERIC(10,2),
    TOTAL NUMERIC(10,2),
    IDSKU CHAR(10),
    SIZE  CHAR(10),
    COLOR CHAR(10),
    FULLFILLED CHAR(10),
    SHIP_DATE DATE,
    BILL_DATE DATE,
    ORDER_ID INTEGER,
    ITEM_ID INTEGER,
    CREATED_AT DATETIME,
    PRIMARY KEY(ORDER_DETAIL_ID)
);

CREATE TABLE USERS_ROLES
(
    ID INTEGER NOT NULL,
    ROLE_ID INTEGER NOT NULL,
    USER_ID INTEGER NOT NULL,
    PRIMARY KEY(ID)
);

CREATE TABLE ROLES
(
	ROLE_ID INTEGER NOT NULL,
    ROLE_NAME VARCHAR(30),
    CREATED_AT DATETIME,
    UPDATED_AT DATETIME,
    PRIMARY KEY(ROLE_ID)
);

CREATE TABLE PERMISSIONS
(
	PERMISSION_ID INTEGER NOT NULL,
    PERMISSION_NAME VARCHAR(50),
    CREATED_AT DATETIME,
    UPDATED_AT DATETIME,
    ROLE_ID INTEGER NOT NULL,
    PRIMARY KEY(PERMISSION_ID)
);

/*List of employees with order delivery count*/
select a.employee_name, a.count_delivery
from
(
select concat(e.middle_name,' ',e.last_name) as employee_name,count(*) as count_delivery
from employee e, orders ord
where E.emp_id = ord.emp_id 
and upper(ord.is_deliver)='YES'
) a
group by a.employee_name;



/*List of customers that place an order with order total for a date range*/
select a.customer_name, a.total_orders
from 
(
	select concat(c.middle_name,' ',c.last_name) as customer_name,count(*) as total_orders
	from customer c, orders ord, ORDER_DETAILS ors
	where c.customer_id = ord.customer_id
	and ord.ORDER_ID = ors.ORDER_ID
	and ord.ORDER_DATE between '2018-09-01' and '2018-10-30'
) a
group by a.customer_name;

/*Item with order total for a date range*/
select a.item_name, a.total_orders
from 
(
	select i.item_name,count(*) as total_orders
	from item i, orders ord, ORDER_DETAILS ors
	where i.item_id = ord.item_id
	and ord.ORDER_ID = ors.ORDER_ID
	and ord.ORDER_DATE between '2018-09-01' and '2018-10-30'
) a
group by a.item_name;

/*Date-wise order totals for a date range*/
select ord.ORDER_DATE as order_date, count(*) as total_orders
from orders ord, ORDER_DETAILS ors
where ord.ORDER_ID = ors.ORDER_ID
and ord.ORDER_DATE between '2018-09-01' and '2018-10-30'
group by ord.ORDER_DATE;

/*Item count in store for all items.*/
SELECT I.ITEM_NAME, COUNT(*) AS NO_OF_ITEMS 
FROM ITEM I, STORE S
WHERE I.ITEM_ID = S.ITEM_ID
GROUP BY I.ITEM_NAME;
